import pyodbc

from telebot import types

from Settings import CONNECTION_STRING
import Responser


class Spectator(Responser.Responser):
    """–ö–ª–∞—Å—Å, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –Ω–∞–±–ª—é–¥–∞—é—â–∏–µ —Ä–æ–ª–∏ (—Ä—É–∫-–ª—å –∏ —Ç.–ø.)"""

    user_id = None
    department = ""
    fullname = ""
    role = ""
    products = {}
    notification_alert_state = None
    get_pings_state = None
    notification_alert_state_name = None
    get_pings_state_name = None
    shift = ""

    @staticmethod
    def is_spectator(user_id):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–±–ª—é–¥–∞—é—â–∏–º"""
        sqlserver_db = pyodbc.connect(CONNECTION_STRING)
        sqlserver_cursor = sqlserver_db.cursor()
        sql = f"SELECT u.user_id " \
              f"FROM UKSTGBot.dbo.Users u with(nolock) " \
              f"JOIN UKSTGBot.dbo.Callider c with(nolock) on c.userlogin = u.userlogin " \
              f"WHERE u.user_id = {user_id} " \
              f"  AND u.is_block = 0 " \
              f"  AND u.is_spectator = 1 " \
              f"  AND c.fired = 0 " \
              f"  AND c.role in (1,2)"
        return sqlserver_cursor.execute(sql).fetchone() is not None

    def __init__(self, spectator_id):
        """–ò–Ω–∏–Ω—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è / –ø—Ä–æ–¥—É–∫—Ç–æ–≤–æ–≥–æ —ç–∫—Å–ø–µ—Ä—Ç–∞"""
        super().__init__(spectator_id)
        sqlserver_db = pyodbc.connect(CONNECTION_STRING)
        sqlserver_cursor = sqlserver_db.cursor()
        sql = f"SELECT u.user_id " \
              f"  , case when u.notification_alert_state = 0 then '–ù–µ—Ç' else '–î–∞' end " \
              f"  , case when u.get_pings_state = 0 then '–ù–µ—Ç' else '–î–∞' end " \
              f"  , c.fullname " \
              f"  , c.department " \
              f"  , ur.role_name " \
              f"  , p.product_id " \
              f"  , p.product_name " \
              f"  , concat(convert(time(0), cs.start_date), ' - ', convert(time(0), cs.end_date)) " \
              f"  , u.notification_alert_state " \
              f"  , u.get_pings_state " \
              f"FROM UKSTGBot.dbo.Users as u with(nolock) " \
              f"JOIN UKSTGBot.dbo.Callider as c with(nolock) ON c.userlogin = u.userlogin " \
              f"JOIN UKSTGBot.dbo.UserRoles as ur with(nolock) ON ur.role_id = c.role " \
              f"LEFT JOIN UKSTGBot.dbo.UserOptionalProducts as uop with(nolock) ON uop.user_id = u.user_id " \
              f"  AND uop.direction = 'response' " \
              f"LEFT JOIN UKSTGBot.dbo.Products as p with(nolock) ON p.product_id = uop.product_id " \
              f"LEFT JOIN UKSTGBot.dbo.CalliderShifts as cs with(nolock) ON cs.callider_id = c.callider_id " \
              f"WHERE u.user_id = {spectator_id} " \
              f"  AND u.is_block = 0 " \
              f"  AND u.is_spectator = 1 " \
              f"ORDER BY p.product_name"
        data = sqlserver_cursor.execute(sql).fetchall()
        self.user_id = data[0][0]
        self.fullname = data[0][3]
        self.department = data[0][4]
        self.role = data[0][5]
        self.notification_alert_state_name = data[0][1]
        self.get_pings_state_name = data[0][2]
        self.shift = data[0][8]
        self.notification_alert_state = data[0][9]
        self.get_pings_state = data[0][10]
        for row in data:
            self.products.setdefault(row[6], row[7])
        sqlserver_db.close()

    def to_str(self):
        """–í—ã–≤–µ—Å—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –Ω–∞–±–ª—é–¥–∞—é—â–µ–º—É"""
        info = ""
        for product in self.products.values():
            info += f"{product} , "
        return super().to_str() + f"\n–ü–æ–ª—É—á–∞–µ—à—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—á–µ—Ä–µ–¥–∏ : {self.notification_alert_state}\n" \
               f"–ü–æ–ª—É—á–µ—à—å –ø–∏–Ω–≥–∏ : {self.get_pings_state}"

    def create_keyboard(self, change_responser_state=0):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ—Å–ª–µ —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞"""
        notification_on = types.InlineKeyboardButton(text="–í–∫–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="notification_on")
        notification_off = types.InlineKeyboardButton(text="–í—ã–∫–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="notification_off")
        get_pings = types.InlineKeyboardButton(text="–ü–æ–ª—É—á–∞—Ç—å –ø–∏–Ω–≥–∏", callback_data="get_pings")
        not_get_pings = types.InlineKeyboardButton(text="–ù–µ –ø–æ–ª—É—á–∞—Ç—å –ø–∏–Ω–≥–∏", callback_data="not_get_pings")
        green_state_btn = types.KeyboardButton(text="–°–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å üü¢")
        red_state_btn = types.KeyboardButton(text="–°–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å üî¥")

        kbrd = types.ReplyKeyboardMarkup(resize_keyboard=True)
        kbrd.row(types.KeyboardButton(text="–û—á–µ—Ä–µ–¥—å"), types.KeyboardButton(text="–û—Ç–≤–µ—á–∞—é—â–∏–µ"))
        if self.get_pings_state == 1:
            if change_responser_state == 1:
                kbrd.row(red_state_btn, types.KeyboardButton(text="–í–∑—è—Ç—å –µ—â–µ –ø–∏–Ω–≥"))
            elif self.check_responser_state() == "–ó–µ–ª–µ–Ω—ã–π":
                kbrd.row(green_state_btn, types.KeyboardButton(text="–í–∑—è—Ç—å –µ—â–µ –ø–∏–Ω–≥"))
            else:
                kbrd.row(red_state_btn, types.KeyboardButton(text="–í–∑—è—Ç—å –µ—â–µ –ø–∏–Ω–≥"))
        kbrd.row(notification_on if self.notification_alert_state == 0 else notification_off
                , get_pings if self.get_pings_state == 0 else not_get_pings)
        kbrd.row(types.KeyboardButton(text="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ")
                , types.KeyboardButton(text="–û–±–æ –º–Ω–µ"))
        return kbrd

    def switch_notification_alert_state(self):
        """–í–∫–ª—é—á–∏—Ç—å / –≤—ã–∫–ª—é—á–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –æ—á–µ—Ä–µ–¥–∏"""
        if self.notification_alert_state == 0:
            new_state = 1
        else:
            new_state = 0

        self.notification_alert_state = new_state

        sqlserver_db = pyodbc.connect(CONNECTION_STRING)
        sqlserver_cursor = sqlserver_db.cursor()
        sql = f"UPDATE UKSTGBot.dbo.Users " \
              f"SET notification_alert_state = {new_state} " \
              f"WHERE user_id = {self.user_id}"
        sqlserver_cursor.execute(sql).commit()
        sqlserver_db.close()
        return

    def switch_get_pings_state(self):
        """–ü–æ–ª—É—á–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∞—Ç—å / –Ω–µ –ø–æ–ª—É—á–∞—Ç—å –ø–∏–Ω–≥–∏"""
        if self.get_pings_state == 0:
            new_state = 1
        else:
            new_state = 0

        self.get_pings_state = new_state

        sqlserver_db = pyodbc.connect(CONNECTION_STRING)
        sqlserver_cursor = sqlserver_db.cursor()
        sql = f"UPDATE UKSTGBot.dbo.Users " \
              f"SET get_pings_state = {new_state} " \
              f"  , can_response = {new_state} " \
              f"  , responser_state_id = 0" \
              f"WHERE user_id = {self.user_id}"
        sqlserver_cursor.execute(sql).commit()
        sqlserver_db.close()
        return
